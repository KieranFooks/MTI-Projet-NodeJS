// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Status {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model User {
  id                Int    @id @default(autoincrement())
  email             String @unique
  name              String
  password          String
  blockchainAddress String
  role              Role   @default(USER)
  teamId            Int?

  team            Team?          @relation(fields: [teamId], references: [id], onDelete: Cascade)
  buyTransactions Transactions[]
  userRating      UserRating[]
}

model Team {
  id      Int    @id @default(autoincrement())
  name    String
  balance Float  @default(0)

  users             User[]
  createdCollection Collection[]
  ownedNft          Nft[]
  transactions      Transactions[]
}

model Nft {
  id           Int    @id @default(autoincrement())
  name         String
  image        String
  price        Float
  status       Status @default(DRAFT)
  collectionId Int
  teamId       Int

  team         Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  collection   Collection     @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  transactions Transactions[]
  userRating   UserRating[]
}

model Transactions {
  id           Int      @id @default(autoincrement())
  amount       Float
  timestamp    DateTime @default(now())
  nftId        Int
  sellerTeamId Int
  buyerId      Int

  buyer      User @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  nft        Nft  @relation(fields: [nftId], references: [id], onDelete: Cascade)
  sellerTeam Team @relation(fields: [sellerTeamId], references: [id], onDelete: Cascade)
}

model Collection {
  id                Int       @id @default(autoincrement())
  name              String
  logo              String?
  status            Status    @default(DRAFT)
  timeAutoArchiving DateTime?
  creatorTeamId     Int

  creatorTeam Team  @relation(fields: [creatorTeamId], references: [id], onDelete: Cascade)
  nfts        Nft[]
}

model UserRating {
  id        Int      @id @default(autoincrement())
  rate      Int
  timestamp DateTime @default(now())
  nftId     Int
  userId    Int

  nft  Nft  @relation(fields: [nftId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([nftId, userId])
}
