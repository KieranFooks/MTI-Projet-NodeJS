# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type userRating {
  id: Int!
  nft: nft!
  user: user!
  rate: Int!
  timestamp: Timestamp!
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type transactions {
  id: Int!
  nft: nft!
  seller: user!
  buyer: user!
  amount: Float!
  timestamp: Timestamp!
}

type nft {
  id: Int!
  name: String!
  image: String!
  price: String!
  status: Status!
  team: team!
  transactions: [transactions]!
  collection: collection
  userRating: [userRating]!
}

enum Status {
  DRAFT
  PUBLISHED
  ARCHIVED
}

type collection {
  id: Int!
  name: String!
  logo: String!
  status: Status!
  timeAutoArchive: Timestamp
  NFTs: [nft]!
  creatorTeam: team!
}

type team {
  id: Int!
  name: String!
  balance: Float!
  users: [user!]!
  createdCollection: [collection]!
  ownedNFT: [nft]!
}

type user {
  id: Int!
  email: String!
  name: String!
  password: String!
  blockchainAddress: String!
  role: Role!
  team: team
  buyTransactions: [transactions]!
  sellTransactions: [transactions]!
  userRating: [userRating]!
}

enum Role {
  USER
  ADMIN
}

type LoggedUserOutput {
  """Generated access_token of the user"""
  access_token: String!
}

type Query {
  allUsers: [user]!
  user(id: Int!): user
  signUp(user: UserCreateInput!): user
  teams: [team!]!
  team(id: Float!): team
  collections: [collection]!
  collection(id: Float!): collection
  nfts: [nft]!
  nft(id: Float!): nft
  myRatings: [userRating]!
}

input UserCreateInput {
  email: String!
  name: String!
  password: String!
  blockchainAddress: String!
}

type Mutation {
  signIn(user: LoginInput!): LoggedUserOutput
  createTeam(teamCreateInput: TeamCreateInput!): team!
  createCollection(collection: CreateCollectionInput!): collection!
  updateCollection(collection: UpdateCollectionInput!): collection!
  createNFT(nft: CreateNFTInput!): nft!
  updateNFT(nft: UpdateNFTInput!): nft!
  buyNFT(id: Float!): nft!
  rateNFT(rating: RateNFTInput!): userRating!
}

input LoginInput {
  email: String!
  password: String!
}

input TeamCreateInput {
  name: String!
  balance: Float
}

input CreateCollectionInput {
  name: String!
  logo: String
  timeAutoArchiving: Timestamp
  NFTs: [nftInput]!
}

input nftInput {
  name: String!
  image: String!
  price: String!
}

input UpdateCollectionInput {
  collectionId: Int!
  name: String
  logo: String
  timeAutoArchiving: Timestamp
  status: Status
}

input CreateNFTInput {
  name: String!
  image: String!
  price: Float!
  collectionId: Int
  status: Status
}

input UpdateNFTInput {
  id: Int!
  status: Status
  price: Float
}

input RateNFTInput {
  nftId: Int!
  rate: Int!
}