# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type collection {
  id: Int!
  name: String!
  email: String
  status: Status!
  timeAutoArchive: Timestamp!
  nfts: [nft]!
  creatorTeam: team!
}

enum Status {
  DRAFT
  PUBLISHED
  ARCHIVED
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type userRating {
  id: Int!
  nft: nft!
  user: user!
  rate: Int!
  timestamp: Timestamp!
}

type nft {
  id: Int!
  name: String!
  image: String!
  price: String!
  status: Status!
  role: team!
  transactions: [transactions]!
  collection: collection
  userRating: [userRating]!
}

type transactions {
  id: Int!
  nft: nft!
  seller: user!
  buyer: user!
  amount: Float!
  timestamp: Timestamp!
}

type user {
  id: Int!
  email: String!
  name: String!
  password: String!
  blockchainAddress: String!
  role: Role!
  team: team
  buyTransactions: [transactions]!
  sellTransactions: [transactions]!
  userRating: [userRating]!
}

enum Role {
  USER
  ADMIN
}

type team {
  id: Int!
  name: String!
  balance: Float!
  users: [user!]!
  createdCollection: [collection]!
  ownedNFT: [nft]!
}

type Query {
  allUsers: [user]!
  user(userUniqueInput: UserUniqueInput!): user
  teams: [team!]!
  team(id: Float!): team
}

input UserUniqueInput {
  id: Int
}

type Mutation {
  signupUser(user: UserCreateInput!): user!
  createTeam(teamCreateInput: TeamCreateInput!): team!
}

input UserCreateInput {
  email: String!
  name: String!
  password: String!
  blockchainAddress: String!
}

input TeamCreateInput {
  name: String!
  balance: Float
}